/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package config;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import java.time.DayOfWeek;
import orz.nurseroastering.domain.Employee;
import orz.nurseroastering.domain.ShiftAssignment;
import orz.nurseroastering.domain.NurseRoster;
import orz.nurseroastering.domain.NurseRosterParametrization;
import orz.nurseroastering.domain.Shift;
import orz.nurseroastering.domain.ShiftDate;
import orz.nurseroastering.domain.ShiftType;
import orz.nurseroastering.domain.ShiftTypeSkillRequirement;
import orz.nurseroastering.domain.Skill;
import orz.nurseroastering.domain.SkillProficiency;
import orz.nurseroastering.domain.WeekendDefinition;
import orz.nurseroastering.domain.pattern.FreeBefore2DaysWithAWorkDayPattern;
import orz.nurseroastering.domain.pattern.Pattern;
import orz.nurseroastering.domain.pattern.ShiftType2DaysPattern;
import orz.nurseroastering.domain.pattern.ShiftType3DaysPattern;
import orz.nurseroastering.domain.pattern.WorkBeforeFreeSequencePattern;
import orz.nurseroastering.domain.contract.Contract;
import orz.nurseroastering.domain.contract.BooleanContractLine;
import orz.nurseroastering.domain.contract.ContractLine;
import orz.nurseroastering.domain.contract.ContractLineType;
import orz.nurseroastering.domain.contract.MinMaxContractLine;
import orz.nurseroastering.domain.contract.PatternContractLine;
import orz.nurseroastering.domain.request.DayOffRequest;
import orz.nurseroastering.domain.request.DayOnRequest;
import orz.nurseroastering.domain.request.ShiftOffRequest;
import orz.nurseroastering.domain.request.ShiftOnRequest;
import orz.nurseroastering.domain.solver.EmployeeConsecutiveAssignmentEnd;
import orz.nurseroastering.domain.solver.EmployeeConsecutiveAssignmentStart;
import orz.nurseroastering.domain.solver.EmployeeConsecutiveWeekendAssignmentEnd;
import orz.nurseroastering.domain.solver.EmployeeConsecutiveWeekendAssignmentStart;
import orz.nurseroastering.domain.solver.EmployeeFreeSequence;
import orz.nurseroastering.domain.solver.EmployeeWeekendSequence;
import orz.nurseroastering.domain.solver.EmployeeWorkSequence;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// A nurse can only work one shift per day, i.e. no two shift can be assigned to the same nurse on a day.
rule "oneShiftPerDay"
    when
        ShiftAssignment($leftId : id, $employee : employee, $shiftDate : shiftDate, employee != null)
        ShiftAssignment(employee == $employee, shiftDate == $shiftDate, id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A nurse can not cover night shift and early shift of next day
rule "overNightConsecutiveShiftEarly"
	when
		ShiftAssignment($employee : employee, $dayIndex : shiftDateDayIndex, shift.getShiftType().getCode() == 'N')
		ShiftAssignment(shiftDateDayIndex == $dayIndex + 1 && shift.getShiftType().getCode() == 'E' && employee == $employee)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A nurse can not cover night shift and day shift of next day
rule "overNightConsecutiveShiftDay"
	when
		ShiftAssignment($employee : employee, $dayIndex : shiftDateDayIndex, shift.getShiftType().getCode() == 'N')
		ShiftAssignment(shiftDateDayIndex == $dayIndex + 1 && shift.getShiftType().getCode() == 'D' && employee == $employee)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//Only Head Nurse is allowed to take DH shift
rule "headNurseForDHShift"
	when
		ShiftAssignment ($employee : employee, shift.getShiftType().getCode() == 'DH')
		SkillProficiency (employee == $employee, skill.getCode() != 'HeadNurse')
	then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end	

// ############################################################################
// Soft constraints
// ############################################################################

rule "Head Nurse Not Plan For Normal Shift"
	when
		SkillProficiency ($employee : employee, skill.getCode() == 'HeadNurse')
		ShiftAssignment (employee == $employee, shift.getShiftType().getCode() != 'DH')
	then
       scoreHolder.addSoftConstraintMatch(kcontext, -1);
end	

rule "Minimum and maximum number of assignments"
        salience 1 // Do these rules first (optional, for performance)
    when
        $contractLine : MinMaxContractLine(contractLineType == ContractLineType.TOTAL_ASSIGNMENTS, enabled == true,
            $contract : contract)
        $employee : Employee(contract == $contract)
        accumulate(
            $assignment : ShiftAssignment(employee == $employee);
            $total : count($assignment)
        )
    then
        int totalInt = $total.intValue();
        if ($contractLine.isMinimumEnabled() && totalInt < $contractLine.getMinimumValue()) {
            scoreHolder.addSoftConstraintMatch(kcontext,
                    (totalInt - $contractLine.getMinimumValue()) * $contractLine.getMinimumWeight());
        } else if ($contractLine.isMaximumEnabled() && totalInt > $contractLine.getMaximumValue()) {
            scoreHolder.addSoftConstraintMatch(kcontext,
                    ($contractLine.getMaximumValue() - totalInt) * $contractLine.getMaximumWeight());
        } else {
            // Workaround for https://issues.jboss.org/browse/PLANNER-761
            scoreHolder.addSoftConstraintMatch(kcontext, 0);
        }
end

rule "insertEmployeeConsecutiveAssignmentStart"
        salience 2 // Do these rules first (optional, for performance)
    when
        ShiftAssignment(
            $employee : employee, employee != null,
            $dayIndex : shiftDateDayIndex,
            $shiftDate : shiftDate
        )
        // The first day has no working day before it
        not ShiftAssignment(employee == $employee, shiftDateDayIndex == ($dayIndex - 1))
    then
        insertLogical(new EmployeeConsecutiveAssignmentStart($employee, $shiftDate));
end
rule "insertEmployeeConsecutiveAssignmentEnd"
        salience 2 // Do these rules first (optional, for performance)
    when
        ShiftAssignment(
            $employee : employee, employee != null,
            $dayIndex : shiftDateDayIndex,
            $shiftDate : shiftDate
        )
        // The last day has no working day after it
        not ShiftAssignment(employee == $employee, shiftDateDayIndex == ($dayIndex + 1))
    then
        insertLogical(new EmployeeConsecutiveAssignmentEnd($employee, $shiftDate));
end

rule "insertEmployeeWorkSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        EmployeeConsecutiveAssignmentStart(
            $employee : employee,
            $firstDayIndex : shiftDateDayIndex
        )

        EmployeeConsecutiveAssignmentEnd(
            employee == $employee,
            shiftDateDayIndex >= $firstDayIndex,
            $lastDayIndex : shiftDateDayIndex
        )

        // There are no free days between the first and last day
        not EmployeeConsecutiveAssignmentEnd(
            employee == $employee,
            shiftDateDayIndex >= $firstDayIndex && < $lastDayIndex
        )
    then
        insertLogical(new EmployeeWorkSequence($employee, $firstDayIndex, $lastDayIndex));
end

// Minimum number of consecutive working days
rule "minimumConsecutiveWorkingDays"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.CONSECUTIVE_WORKING_DAYS, minimumEnabled == true,
            $contract : contract, $minimumValue : minimumValue
        )

        EmployeeWorkSequence(
            getEmployee().getContract() == $contract,
            dayLength < $minimumValue,
            $dayLength : dayLength
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($dayLength - $minimumValue) * $contractLine.getMinimumWeight());
end

// Maximum number of consecutive working days
rule "maximumConsecutiveWorkingDays"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.CONSECUTIVE_WORKING_DAYS, maximumEnabled == true,
            $contract : contract, $maximumValue : maximumValue
        )

        EmployeeWorkSequence(
            getEmployee().getContract() == $contract,
            dayLength > $maximumValue,
            $dayLength : dayLength
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($maximumValue - $dayLength) * $contractLine.getMaximumWeight());
end


rule "insertEmployeeFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        EmployeeConsecutiveAssignmentEnd(
            $employee : employee,
            $firstDayIndexMinusOne : shiftDateDayIndex
        )

        EmployeeConsecutiveAssignmentStart(
            employee == $employee,
            shiftDateDayIndex > $firstDayIndexMinusOne,
            $lastDayIndexPlusOne : shiftDateDayIndex
        )

        // There are no working days between the first and last day
        not EmployeeConsecutiveAssignmentStart(
            employee == $employee,
            shiftDateDayIndex > $firstDayIndexMinusOne && < $lastDayIndexPlusOne
        )
    then
        insertLogical(new EmployeeFreeSequence($employee, $firstDayIndexMinusOne + 1, $lastDayIndexPlusOne - 1));
end
rule "insertFirstEmployeeFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        EmployeeConsecutiveAssignmentStart(
            $employee : employee,
            $lastDayIndexPlusOne : shiftDateDayIndex
        )

        // There are no working days before the first day
        not EmployeeConsecutiveAssignmentEnd(
            employee == $employee,
            shiftDateDayIndex < $lastDayIndexPlusOne
        )
        NurseRosterParametrization(firstShiftDateDayIndex < $lastDayIndexPlusOne, $firstDayIndex : firstShiftDateDayIndex)
    then
        insertLogical(new EmployeeFreeSequence($employee, $firstDayIndex, $lastDayIndexPlusOne - 1));
end
rule "insertLastEmployeeFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        EmployeeConsecutiveAssignmentEnd(
            $employee : employee,
            $firstDayIndexMinusOne : shiftDateDayIndex
        )

        // There are no working days after the last day
        not EmployeeConsecutiveAssignmentStart(
            employee == $employee,
            shiftDateDayIndex > $firstDayIndexMinusOne
        )
        NurseRosterParametrization(lastShiftDateDayIndex > $firstDayIndexMinusOne, $lastDayIndex : lastShiftDateDayIndex)
    then
        insertLogical(new EmployeeFreeSequence($employee, $firstDayIndexMinusOne + 1, $lastDayIndex));
end
rule "insertEntireEmployeeFreeSequence"
        salience 1 // Do these rules first (optional, for performance)
    when
        $employee : Employee()
        // There are no working days at all
        not EmployeeConsecutiveAssignmentStart(
            employee == $employee
        )
        NurseRosterParametrization($firstDayIndex : firstShiftDateDayIndex, $lastDayIndex : lastShiftDateDayIndex)
    then
        insertLogical(new EmployeeFreeSequence($employee, $firstDayIndex, $lastDayIndex));
end

// Minimum number of consecutive free days
rule "minimumConsecutiveFreeDays"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.CONSECUTIVE_FREE_DAYS, minimumEnabled == true,
            $contract : contract, $minimumValue : minimumValue
        )

        EmployeeFreeSequence(
            getEmployee().getContract() == $contract,
            dayLength < $minimumValue,
            $dayLength : dayLength
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($dayLength - $minimumValue) * $contractLine.getMinimumWeight());
end

// Maximum number of consecutive free days
rule "maximumConsecutiveFreeDays"
    when
        $contractLine : MinMaxContractLine(
            contractLineType == ContractLineType.CONSECUTIVE_FREE_DAYS, maximumEnabled == true,
            $contract : contract, $maximumValue : maximumValue
        )

        EmployeeFreeSequence(
            getEmployee().getContract() == $contract,
            dayLength > $maximumValue,
            $dayLength : dayLength
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, ($maximumValue - $dayLength) * $contractLine.getMaximumWeight());
end

// Requested day on/off
rule "dayOffRequest"
    when
        DayOffRequest($employee : employee, $shiftDate : shiftDate, $weight : weight)
        ShiftAssignment(employee == $employee, shiftDate == $shiftDate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
rule "dayOnRequest"
    when
        DayOnRequest($employee : employee, $shiftDate : shiftDate, $weight : weight)
        not ShiftAssignment(employee == $employee, shiftDate == $shiftDate)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end

// Requested shift on/off
rule "shiftOffRequest"
    when
        ShiftOffRequest($employee : employee, $shift : shift, $weight : weight)
        ShiftAssignment(employee == $employee, shift == $shift)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
rule "shiftOnRequest"
    when
        ShiftOnRequest($employee : employee, $shift : shift, $weight : weight)
        not ShiftAssignment(employee == $employee, shift == $shift)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight);
end
